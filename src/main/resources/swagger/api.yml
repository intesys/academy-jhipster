# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
openapi: '3.0.1'
info:
  title: 'HipsterAcademy'
  version: 0.0.1
servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://localhost:8080/api
    description: Development server with TLS Profile
paths:
  '/patients/{patientId}':
    get:
      tags:
        - Patient
      summary: Retrieve Patient Details
      operationId: getPatient
      parameters:
        - in: path
          name: patientId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Patient Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
  '/patients/search':
    get:
      tags:
        - Patient
      summary: Searches a Patient by first name or last name
      operationId: searchPatient
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Patient Details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
  '/patients/count':
    get:
      tags:
        - Patient
      summary: Returns the number of patients
      operationId: countPatients
      responses:
        '200':
          description: Patient Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'

  '/patients/{patientId}/examinations':
    get:
      tags:
        - Examinations
      summary: Retrieve all the examinations for a patient
      operationId: getPatientExaminations
      parameters:
        - in: path
          name: patientId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The list of patient examinations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Examination'
  '/examinations':
    post:
      tags:
        - Examinations
      summary: Save a new examination
      operationId: saveExamination
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Examination'
      responses:
        '200':
          description: The list of patient examinations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Examination'

components:
  schemas:
    Counter:
      type: object
      properties:
        count:
          type: integer
          format: int32
    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        fiscalCode:
          type: string
        birthDate:
          type: string
          format: date
    Examination:
      type: object
      properties:
        id:
          type: integer
          format: int64
        patientId:
          type: integer
          format: int64
        examinationDate:
          type: string
          format: date-time
        diastolicPressure:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
        systolicPressure:
          type: integer
          format: int32
        weight:
          type: integer
          format: int32
  responses:
    Problem:
      description: error occurred - see status code and problem object for more information.
      content:
        'application/problem+json':
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'

  securitySchemes:
    jwt:
      type: http
      description: JWT Authentication
      scheme: bearer
      bearerFormat: JWT
    basic:
      type: http
      description: Basic Authentication
      scheme: basic
security:
  - jwt: []
  - basic: []
